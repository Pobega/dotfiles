#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

TEXT_COLOR='#af5f00'
CURSOR_COLOR='white'

function print_256_colors {
  for i in {0..255} ; do
    printf "\x1b[38;5;${i}m%3d " "${i}"
    if (( $i == 15 )) || (( $i > 15 )) && (( ($i-15) % 12 == 0 )); then
        echo;
    fi
   done
}

# get and print current branch in git repo
function get_git_branch() {
  GIT_COLOR=231
  BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`

  # Detached state
  BRANCH=${BRANCH/HEAD detached at/@}

  if [ ! "${BRANCH}" == "" ]; then
    STAT=`parse_git_dirty`
    if [ ! "${STAT}" == "" ]; then

      # remove 'HEAD detached from' text
      if [[ $BRANCH = *"HEAD detached from"* ]]; then
        BRANCH=${BRANCH/HEAD detached from/\~}
      fi

      if [ "${STAT}" == "*" ]; then
	GIT_COLOR=39
	GIT_STATUS="${BRANCH} ${STAT}"
      elif [ "${STAT}" == "+" ]; then
	GIT_COLOR=98
	GIT_STATUS="${BRANCH} ${STAT}"
      elif [ "${STAT}" == "!" ]; then
	GIT_COLOR=226
	GIT_STATUS="${BRANCH} ${STAT}"
      else
	GIT_COLOR=1
	GIT_STATUS="${BRANCH} ${STAT}"
      fi
    else
      GIT_COLOR=46
      GIT_STATUS="${BRANCH}"

      # 'detached from' clean state should be considered ahead
      if [[ $BRANCH = *"HEAD detached from"* ]]; then
        BRANCH=${BRANCH/HEAD detached from/\~}
        GIT_COLOR=46
        GIT_STATUS="${BRANCH} *  "
      fi
    fi
  else
    GIT_STATUS=""
  fi
}

# get current status of git repo
function parse_git_dirty {
	status=`git status 2>&1 | tee`
	dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
	untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
	ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
	newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
	renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
	deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
	bits=''
	if [ "${renamed}" == "0" ]; then
		bits=">${bits}"
	fi
	if [ "${ahead}" == "0" ]; then
		bits="*${bits}"
	fi
	if [ "${newfile}" == "0" ]; then
		bits="+${bits}"
	fi
	if [ "${untracked}" == "0" ]; then
		bits="?${bits}"
	fi
	if [ "${deleted}" == "0" ]; then
		bits="x${bits}"
	fi
	if [ "${dirty}" == "0" ]; then
		bits="!${bits}"
	fi
	if [ ! "${bits}" == "" ]; then
		echo "${bits}"
	else
		echo ""
	fi
}
# print out a simpler cwd, only going 1 dir higher.
# Actual dir: /home/pobega/work/project/
# Output: work/project/
function get_cwd {
  if [ "${PWD}" == "${HOME}" ]; then
    CWD="~"
  else
    if [ "${PWD}" == "/" ]; then
      CWD="/"
    else
      # replace full homedir with ~
      home_shortened="${PWD/$HOME/\~}"
      directory="${home_shortened%/*}"
      CWD="${directory##*/}/${PWD##*/}/"
    fi
  fi
}

## Command timer
# record and display the elapsed time of the previous command between
# each shell prompt
TIMER_COLOR=26

# Unix epoch time in nanoseconds
function epoch_ms {
  date +%s%3N
}

# DEBUG trap function
# Record our start time for calculation later
function timer_start {
  start_time=${start_time:-$(epoch_ms)}
}

# PROMPT_COMMAND callback function
# Calculate the time between timer_start and timer_start and set
# $CMD_TIMER to a human readable version of the time elapsed.
function timer_stop {
  # Exit early on first run (to avoid erroneous 1ms timer on shell spawn.)
  if [ -z "${first_run_timer}" ]; then
    first_run_timer='complete'
    unset start_time
    return 0
  fi
  local ms=$(($(epoch_ms) - $start_time))
  local s=$(((ms / 1000) % 60))
  local m=$(((ms / 60000) % 60))
  local h=$((ms / 3600000))
  if ((h > 0)); then CMD_TIMER=${h}h${m}m
  elif ((m > 0)); then CMD_TIMER=${m}m${s}s
  elif ((s > 9)); then local us=$(((${ms} % 1000)/ 100)); CMD_TIMER=${s}.$(printf $us)s
  elif ((s > 0)); then local us=$((${ms} % 1000)); CMD_TIMER=${s}.$(printf %03d $us)s
  else CMD_TIMER=${ms}ms
  fi
  unset start_time
}

# Find the currently set $BOARD.
# Useful for ChromeOS and Android development.
function get_board {
  SHOWBOARD=""
  if test -n "$BOARD"; then
    SHOWBOARD=" (${BOARD})"
  fi
}

# Set our DEBUG trap function
trap 'timer_start' DEBUG

## Different color for different users
# Home should be blue, work should be purple, other should be orange
# root should always be red
USERNAME=$USER
MAIN_COLOR=202
if [ "${HOSTNAME}" == "hotbox" ]; then
  MAIN_COLOR=92
else
  if [ "${HOSTNAME}" == "icebox" ]; then
    MAIN_COLOR=26
  else
    if [ "${HOSTNAME}" == "toolbox" ]; then
      USERNAME=toolbox
      MAIN_COLOR=136
    fi
  fi
fi
if [ "${USER}" == "root" ]; then
  MAIN_COLOR=88
fi

function check_for_venv {
  VENV_PROMPT=""
  # Check if in venv
  if [[ "$VIRTUAL_ENV" != "" ]]; then
    VENV_PROMPT="(${VIRTUAL_ENV##*/}) "
  fi
}

## https://stackoverflow.com/questions/7697889/how-to-show-git-status-info-on-the-right-side-of-the-terminal/8399653#8399653
prompt() {
  timer_stop
  get_cwd
  get_git_branch
  check_for_venv
  get_board

  # Command timer prompt
  if [[ "$CMD_TIMER" != "" ]]; then
    printf "\e[38;5;${TIMER_COLOR}m%`tput cols`s`tput cr`\e[0m\n" "[ ${CMD_TIMER} ]"
  fi

  # Set the actual prompt
  PS1="${VENV_PROMPT}\\[\033[38;5;${MAIN_COLOR}m\\]${USERNAME}${SHOWBOARD}\\[\033[0m\\]:\\[\033[38;5;28m\\]${CWD}\\[\033[0m\\] "

  # right "prompt"
  printf "\e[38;5;${GIT_COLOR}m%`tput cols`s`tput cr`\e[0m" "${GIT_STATUS}"

  # fix cursor color (otherwise it's the same color as GIT_STATUS)
  printf '%b' "\e]12;${CURSOR_COLOR}\a"

  # change default text color
  echo -ne "\033]10;${TEXT_COLOR}\007"

  # update bash title
  echo -en "\033]0; ${USERNAME}@${HOSTNAME} \a"
}

PROMPT_COMMAND=prompt
