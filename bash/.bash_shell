#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

function print_256_colors {
  for i in {0..255} ; do
    printf "\x1b[38;5;${i}m%3d " "${i}"
    if (( $i == 15 )) || (( $i > 15 )) && (( ($i-15) % 12 == 0 )); then
        echo;
    fi
   done
}

# get and print current branch in git repo
function get_git_branch() {
  GIT_COLOR=231
  BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
  if [ ! "${BRANCH}" == "" ]; then
    STAT=`parse_git_dirty`
    if [ ! "${STAT}" == "" ]; then
      GIT_COLOR=1
      GIT_STATUS="${BRANCH}${STAT}"
    else
      GIT_COLOR=46
      GIT_STATUS="${BRANCH}"
    fi
  else
    GIT_STATUS=""
  fi
}

# get current status of git repo
function parse_git_dirty {
	status=`git status 2>&1 | tee`
	dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
	untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
	ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
	newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
	renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
	deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
	bits=''
	if [ "${renamed}" == "0" ]; then
		bits=">${bits}"
	fi
	if [ "${ahead}" == "0" ]; then
		bits="*${bits}"
	fi
	if [ "${newfile}" == "0" ]; then
		bits="+${bits}"
	fi
	if [ "${untracked}" == "0" ]; then
		bits="?${bits}"
	fi
	if [ "${deleted}" == "0" ]; then
		bits="x${bits}"
	fi
	if [ "${dirty}" == "0" ]; then
		bits="!${bits}"
	fi
	if [ ! "${bits}" == "" ]; then
		echo " ${bits}"
	else
		echo ""
	fi
}
# print out a simpler cwd, only going 1 dir higher.
# Actual dir: /home/pobega/work/project/
# Output: work/project/
function get_cwd {
  if [ "${PWD}" == "${HOME}" ]; then
    CWD="~"
  else
    if [ "${PWD}" == "/" ]; then
      CWD="/"
    else
      # replace full homedir with ~
      home_shortened="${PWD/$HOME/\~}"
      directory="${home_shortened%/*}"
      CWD="${directory##*/}/${PWD##*/}/"
    fi
  fi
}

## Different color for different users
# Home should be blue, work should be purple, other should be orange
# root should always be red
USERNAME=$USER
MAIN_COLOR=202
if [ "${HOSTNAME}" == "hotbox" ]; then
  MAIN_COLOR=92
else
  if [ "${HOSTNAME}" == "icebox" ]; then
    MAIN_COLOR=26
  else
    if [ "${HOSTNAME}" == "toolbox" ]; then
      USERNAME=toolbox
      MAIN_COLOR=136
    fi
  fi
fi
if [ "${USER}" == "root" ]; then
  MAIN_COLOR=88
fi

prompt() {
  get_cwd
  get_git_branch

  PS1="\\[\033[38;5;${MAIN_COLOR}m\\]${HOSTNAME}\\[\033[0m\\]:\\[\033[38;5;28m\\]${CWD}\\[\033[0m\\] "

  # right "prompt"
  printf "\e[38;5;${GIT_COLOR}m%`tput cols`s`tput cr`\e[0m" "${GIT_STATUS}"

  # fix cursor color (otherwise it's the same color as GIT_STATUS)
  printf '%b' '\e]12;white\a'
}

PROMPT_COMMAND=prompt
