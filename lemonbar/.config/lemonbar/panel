#!/usr/bin/env python
from subprocess import Popen, PIPE
from datetime import datetime
import alsaaudio
import re
import psutil
import sys
import os

# for wireless
import iwlib

font1 = 'Input Mono Light-12'
font2 = 'Roboto-11'
font3 = 'Font Awesome-11'
background_color1 =  '#689cba'
background_color2 =  '#70b0d0'
background_color3 =  '#90d0f0'
shadow_color = '#507090'
font_color1 =  '#333333'
font_color2 =  '#333333'
font_color3 =  '#333333'
icon_color1 = '#111111'
icon_color2 = '#222222'
icon_color3 = '#333333'

class Renderer(object):
    def __init__(self):
        self.font = self.font_color = self.background_color = None
        self.clear()

    def clear(self):
        self.text = ''
        self.set_font(2)
        self.set_font_color('white')
        self.set_background_color('black')

    def set_font_color(self, color):
        if color != self.font_color:
            self.print('%%{F%s}' % (color))
            self.font_color = color

    def get_font_color(self):
        return self.font_color

    def set_background_color(self, color):
        if color != self.background_color:
            self.print('%%{B%s}' % (color))
            self.background_color = color

    def get_background_color(self):
        return self.background_color

    def set_font(self, font):
        if font != self.font:
            self.print('%%{T%d}' % (font))
            self.font = font

    def get_font(self):
        return self.font

    def print(self, text):
        self.text += text

    def print_icon(self, text):
        with self.temporary():
            self.set_font(3)
            self.print_space(2)
            self.print(text)
            self.print_space(1)

    def print_number(self, text):
        match = re.match('^(0*(?!\.|$))(.*)$', text)
        with self.temporary():
            self.set_font_color(shadow_color)
            self.print(match.group(1))
        self.print(match.group(2))

    def print_space(self, number):
        if not re.match('.*[\s\u2000-\u200b](%{[^}]*})*$', self.text):
            self.print('\u2004' * number) #number/3 em space

    def get_text(self):
        return self.text

    def switch_to_next_monitor(self):
        self.print('%{S+}')

    def align_to_right(self):
        self.print('%{r}')

    def align_to_center(self):
        self.print('%{c}')

    def align_to_left(self):
        self.print('%{l}')

    def temporary(self):
        return self.Temporary(self)

    class Temporary(object):
        def __init__(self, renderer):
            self.renderer = renderer

        def __enter__(self):
            self.font = self.renderer.font
            self.font_color = self.renderer.font_color
            self.background_color = self.renderer.background_color

        def __exit__(self, *args):
            self.renderer.set_font(self.font)
            self.renderer.set_font_color(self.font_color)
            self.renderer.set_background_color(self.background_color)



class MyRenderer(object):
    def __init__(self, monitor_count=1):
        self.renderer = Renderer()
        self.cpu = 0
        self.time = datetime.now()
        self.monitor_count = monitor_count

    def refresh(self):
        self.cpu = psutil.cpu_percent(interval=1)
        self.time = datetime.now()

    def print_user(self):
        with self.renderer.temporary():
            self.renderer.set_font_color("#dddddd")
            self.renderer.set_background_color("#262626")
            self.renderer.print("pobegam@x301")

    def print_logout(self):
        with self.renderer.temporary():
            self.renderer.set_font_color(icon_color1)
            #self.renderer.print_icon('\uf085')
#            self.renderer.print_icon('\uf011')
        self.renderer.print('\u2004\uf011')
        self.print_left_switch(background_color2, font_color2, background_color1)

    def print_workspaces(self,num):
        icons = {0: '\uf0ac',
                 1: '\uf120',
                 2: '\uf198',
                 3: '\uf1b3',
                 4: '\uf1b6',
                 5: '\uf1a1',
                 6: '\uf1e8',}
        current = os.popen('xprop -root _NET_CURRENT_DESKTOP | cut -d" " -f 3').read().rstrip()
        with self.renderer.temporary():
            if num == int(current):
                self.renderer.set_font_color(background_color3)
#            self.renderer.print('\u2004' + icons[num])
            self.renderer.print(icons[num] + '\u2004\u2004')

    def print_cpu_usage(self):
        self.renderer.print_space(2)
        self.print_right_switch(background_color1, font_color1)
        with self.renderer.temporary():
            self.renderer.set_font_color(icon_color1)
            #self.renderer.print_icon('\uf085')
            self.renderer.print_icon('\uf0e7')
        self.renderer.print_number('%03.0f' % self.cpu)

    def print_volume(self):
        try:
            volume = alsaaudio.Mixer().getvolume()[0]
        except alsaaudio.ALSAAudioError as e:
            volume = "0"
        with self.renderer.temporary():
            self.renderer.set_font_color(icon_color1)
            if int(volume) < 20:
                self.renderer.print_icon('\uf026')
            elif int(volume) < 60:
                self.renderer.print_icon('\uf027')
            else:
                self.renderer.print_icon('\uf028')
        self.renderer.print_number('%03d' % volume)

    def print_date(self):
        self.print_right_switch(background_color2, font_color2)
        with self.renderer.temporary():
            self.renderer.set_font_color(icon_color2)
            self.renderer.print_icon('\uf073')
            #self.renderer.print_icon('\uf133')
        self.renderer.print(datetime.strftime(self.time, '%a, %Y-%m-%d'))

    def print_battery(self, num=0):
        if num == 0:
            self.print_right_switch(background_color2, font_color2)
        capacity_file = "/sys/class/power_supply/BAT{}/capacity".format(num)
        status_file = "/sys/class/power_supply/BAT{}/status".format(num)
        with open(capacity_file, 'r') as capacity:
            battery_life = capacity.read().rstrip()
        with open(status_file, 'r') as status:
            battery_status = status.read().rstrip()
            if battery_status == "Charging":
                status = "+"
            elif battery_status == "Discharging":
                status = "-"
            else:
                status = ""
        with self.renderer.temporary():
            self.renderer.set_font_color(icon_color2)
            if int(battery_life) < 20:
                self.renderer.print_icon('\uf244')
            elif int(battery_life) < 40:
                self.renderer.print_icon('\uf243')
            elif int(battery_life) < 60:
                self.renderer.print_icon('\uf242')
            elif int(battery_life) < 80:
                self.renderer.print_icon('\uf241')
            else:
                self.renderer.print_icon('\uf240')
        self.renderer.print("{}{}%".format(status, battery_life))


    def print_wifi(self):
        self.print_right_switch(background_color3, font_color3)
        with self.renderer.temporary():
            self.renderer.set_font_color(icon_color3)
            self.renderer.print_icon('\uf1eb')
        if 'stats' in iwlib.get_iwconfig("wls1"):
            essid = iwlib.get_iwconfig("wls1")['ESSID']
            essid = essid.decode("utf-8")
            self.renderer.print(essid)
        else:
            self.renderer.print("None")

    def print_clock(self):
        with self.renderer.temporary():
            self.renderer.set_font_color(icon_color3)
            self.renderer.print_icon('\uf017')
        self.renderer.print(datetime.strftime(self.time, '%H:%M'))

    def print_right_switch(self, bg_color, fg_color):
        with self.renderer.temporary():
            self.renderer.set_font(1)
            self.renderer.set_font_color(bg_color)
            self.renderer.print_space(2)
            self.renderer.print('')
        self.renderer.set_background_color(bg_color)
        self.renderer.set_font_color(fg_color)
        self.renderer.print_space(1)

    def print_left_switch(self, bg_color, fg_color, bg_color2="#262626"):
        self.renderer.set_background_color(bg_color)
        self.renderer.set_font_color(fg_color)
        self.renderer.print_space(1)
        with self.renderer.temporary():
            self.renderer.set_font(1)
            self.renderer.set_font_color(bg_color)
            self.renderer.set_background_color(bg_color2)
            self.renderer.print(' ')

    def render(self):
        self.renderer.clear()
        for m in range(self.monitor_count):

            # Left
            self.renderer.align_to_left()
            self.renderer.set_background_color(background_color2)
            self.renderer.set_font_color(font_color2)
            self.print_logout()
            self.renderer.set_background_color(background_color1)
            self.renderer.set_font_color(font_color1)
            for i in range(0,7):
                self.renderer.print_space(1)
                self.print_workspaces(i)
            self.print_left_switch(background_color1, font_color1)

            # Center
            self.renderer.align_to_center()
            self.renderer.set_background_color('#262626')
            self.renderer.set_font_color('#dddddd')
            self.print_user()

            # Right
            self.renderer.align_to_right()
            self.print_cpu_usage()
            self.print_volume()
            self.print_battery(0)
            self.print_battery(1)
            self.print_wifi()
            self.print_clock()
            self.renderer.print_space(2)
            self.renderer.switch_to_next_monitor()
            self.renderer.set_background_color('#262626')
        return self.renderer.get_text()

def main():
    process = Popen([
        'lemonbar',
        '-p',
        '-f', font1,
        '-o', '2',
        '-f', font2,
        '-o', '-2',
        '-f', font3,
        '-o', '-3',
        '-g', '1280x20+80+12'],
#        '-g', 'x20'],
        stdout=PIPE,
        stdin=PIPE,
        bufsize=1)

    renderer = MyRenderer(monitor_count=2)
    while True:
        process.stdin.write((renderer.render() + "\n").encode('utf8'))
        process.stdin.flush()
        renderer.refresh()

if __name__ == '__main__':
    main()
